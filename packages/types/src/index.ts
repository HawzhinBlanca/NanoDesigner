/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/healthz": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health check */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Basic metrics */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/render": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Render images */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RenderRequest"];
                };
            };
            responses: {
                /** @description Rendered assets */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RenderResponse"];
                    };
                };
                /** @description Guardrails validation error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ingest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Ingest assets */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["IngestRequest"];
                };
            };
            responses: {
                /** @description Ingested */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["IngestResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/canon/derive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Derive Brand Canon */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CanonDeriveRequest"];
                };
            };
            responses: {
                /** @description Canon */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CanonDeriveResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/critique": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Critique assets */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CritiqueRequest"];
                };
            };
            responses: {
                /** @description Critique */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CritiqueResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        RenderRequest: {
            project_id: string;
            prompts: {
                /** @enum {string} */
                task: "create" | "edit" | "variations";
                instruction: string;
                references?: string[];
            };
            outputs: {
                count: number;
                /** @enum {string} */
                format: "png" | "jpg" | "webp";
                dimensions: string;
            };
            constraints?: {
                palette_hex?: string[];
                fonts?: string[];
                logo_safe_zone_pct?: number;
            };
        };
        RenderResponse: {
            assets: {
                url: string;
                r2_key: string;
                synthid?: {
                    present?: boolean;
                    payload?: string;
                };
            }[];
            audit: {
                trace_id?: string;
                model_route?: string;
                cost_usd?: number;
                guardrails_ok?: boolean;
                /** @enum {string} */
                verified_by?: "declared" | "external" | "none";
            };
        };
        IngestRequest: {
            project_id: string;
            assets: string[];
        };
        IngestResponse: {
            processed?: number;
            qdrant_ids?: string[];
        };
        CanonDeriveRequest: {
            project_id: string;
            evidence_ids: string[];
        };
        CanonDeriveResponse: {
            palette_hex?: string[];
            fonts?: string[];
            voice?: {
                tone?: string;
                dos?: string[];
                donts?: string[];
            };
        };
        CritiqueRequest: {
            project_id: string;
            asset_ids: string[];
        };
        CritiqueResponse: {
            score?: number;
            violations?: string[];
            repair_suggestions?: string[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
