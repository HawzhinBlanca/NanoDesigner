# Performance Benchmarks and SLA Definitions
# Smart Graphic Designer API Performance Requirements

# Response Time SLAs (in milliseconds)
response_time_sla:
  # API-only responses (excluding AI generation time)
  health_check:
    p50: 50     # 50ms for 50th percentile
    p95: 100    # 100ms for 95th percentile
    p99: 200    # 200ms for 99th percentile
    
  metrics_endpoint:
    p50: 100
    p95: 250
    p99: 500
    
  # Full render requests (including AI generation)
  render_simple:
    p50: 8000    # 8 seconds for simple designs
    p95: 15000   # 15 seconds for 95th percentile
    p99: 25000   # 25 seconds for 99th percentile
    timeout: 60000  # 60 second timeout
    
  render_complex:
    p50: 15000   # 15 seconds for complex designs
    p95: 30000   # 30 seconds for 95th percentile
    p99: 45000   # 45 seconds for 99th percentile
    timeout: 120000 # 2 minute timeout
    
  render_bulk:
    p50: 25000   # 25 seconds for bulk generation (6 images)
    p95: 60000   # 60 seconds for 95th percentile
    p99: 90000   # 90 seconds for 99th percentile
    timeout: 180000 # 3 minute timeout

# Throughput Requirements
throughput_sla:
  # Requests per minute by endpoint
  render_endpoint:
    normal_load: 100      # 100 RPM under normal conditions
    peak_load: 200        # 200 RPM during peak periods
    burst_capacity: 300   # 300 RPM for short bursts (< 1 minute)
    
  health_endpoint:
    normal_load: 1000     # 1000 RPM for health checks
    peak_load: 2000       # 2000 RPM during monitoring spikes
    
  # Concurrent user support
  concurrent_users:
    normal: 50            # 50 concurrent users
    peak: 100             # 100 concurrent users during peaks
    stress_test: 200      # Stress test up to 200 users

# Error Rate Thresholds
error_rate_sla:
  overall:
    target: 0.01          # 1% overall error rate target
    threshold: 0.05       # 5% error rate threshold (alert)
    critical: 0.10        # 10% error rate critical (incident)
    
  by_status_code:
    4xx_client_errors:    # Client errors (validation, auth, etc.)
      target: 0.02        # 2% target
      threshold: 0.05     # 5% threshold
      
    5xx_server_errors:    # Server errors (service failures)
      target: 0.005       # 0.5% target  
      threshold: 0.02     # 2% threshold
      
    429_rate_limits:      # Rate limiting responses
      acceptable: 0.10    # 10% acceptable during load spikes
      
  by_operation:
    render_operations:
      success_rate: 0.95  # 95% success rate minimum
      target_rate: 0.98   # 98% success rate target

# Resource Utilization Limits
resource_limits:
  api_service:
    cpu_utilization:
      normal: 60          # 60% CPU under normal load
      peak: 80            # 80% CPU during peaks
      critical: 90        # 90% CPU critical threshold
      
    memory_utilization:
      normal: 70          # 70% memory under normal load
      peak: 85            # 85% memory during peaks
      critical: 95        # 95% memory critical
      
    connection_pool:
      redis_connections: 100
      postgres_connections: 50
      http_connections: 200
      
  ai_model_calls:
    concurrent_requests: 10   # Max 10 concurrent AI requests
    queue_depth: 50          # Queue up to 50 requests
    timeout_per_request: 60  # 60 second timeout per AI call

# Cost Performance Targets
cost_targets:
  per_request:
    simple_design: 0.02   # $0.02 per simple design
    complex_design: 0.05  # $0.05 per complex design
    bulk_generation: 0.15 # $0.15 per bulk generation (6 images)
    
  daily_budget:
    normal_usage: 100     # $100 per day normal usage
    peak_usage: 300       # $300 per day during peaks
    monthly_limit: 5000   # $5000 per month hard limit
    
  cost_efficiency:
    cost_per_successful_render: 0.08  # Max $0.08 per successful render
    failed_request_cost: 0.01         # Max $0.01 cost for failed requests

# Availability Requirements
availability_sla:
  uptime:
    monthly: 99.9         # 99.9% monthly uptime (43.2 minutes downtime)
    daily: 99.95          # 99.95% daily uptime (7.2 minutes downtime)
    
  maintenance_windows:
    scheduled_downtime: 4  # 4 hours per month for maintenance
    emergency_downtime: 2  # 2 hours per month for emergency fixes
    
  recovery_time:
    rto: 15               # 15 minutes Recovery Time Objective
    rpo: 5                # 5 minutes Recovery Point Objective

# Performance Test Scenarios
test_scenarios:
  smoke_test:
    description: "Quick validation test"
    duration: "2m"
    virtual_users: 5
    requests_per_user: 10
    success_criteria:
      - "p95 response time < 1000ms"
      - "error rate < 1%"
      - "all health checks pass"
      
  load_test:
    description: "Normal production load simulation"
    duration: "20m"
    ramp_up: "5m"
    peak_users: 50
    success_criteria:
      - "p95 response time < 1800ms"
      - "error rate < 5%"
      - "throughput > 80 RPM"
      - "no memory leaks"
      
  stress_test:
    description: "Find breaking point and recovery behavior"
    duration: "20m"
    max_users: 200
    ramp_pattern: "gradual"
    success_criteria:
      - "graceful degradation under stress"
      - "no cascading failures"
      - "recovery within 2 minutes after load reduction"
      
  spike_test:
    description: "Sudden load increase simulation"
    duration: "3m"
    baseline_users: 10
    spike_users: 100
    spike_duration: "1m"
    success_criteria:
      - "system remains stable during spike"
      - "response times recover after spike"
      - "no lost requests"
      
  endurance_test:
    description: "Long-running stability test"
    duration: "60m"
    constant_users: 30
    success_criteria:
      - "no performance degradation over time"
      - "no memory leaks"
      - "stable response times"
      - "consistent throughput"

# Monitoring and Alerting Thresholds
monitoring_thresholds:
  response_time_alerts:
    warning: "p95 > 1000ms for 2 consecutive minutes"
    critical: "p95 > 2000ms for 1 minute"
    
  error_rate_alerts:
    warning: "error rate > 3% for 2 minutes"
    critical: "error rate > 7% for 1 minute"
    
  throughput_alerts:
    warning: "throughput drops below 60 RPM for 5 minutes"
    critical: "throughput drops below 30 RPM for 2 minutes"
    
  cost_alerts:
    warning: "daily cost exceeds $150"
    critical: "daily cost exceeds $250"
    budget: "monthly cost exceeds $4000"

# Performance Optimization Guidelines
optimization_guidelines:
  caching:
    - "Cache embedding results for 24 hours"
    - "Cache render plans for 1 hour"
    - "Implement Redis connection pooling"
    
  database:
    - "Optimize database queries with proper indexing"
    - "Use connection pooling (max 50 connections)"
    - "Implement read replicas for analytics"
    
  ai_services:
    - "Implement request queuing for AI calls"
    - "Use batch processing where possible"
    - "Implement circuit breakers for external services"
    
  storage:
    - "Use CDN for asset delivery"
    - "Implement presigned URLs with short TTL"
    - "Compress images during upload"
    
  monitoring:
    - "Monitor P95 response times, not just averages"
    - "Track business metrics (successful renders per hour)"
    - "Alert on cost anomalies"
    - "Monitor third-party service SLAs"