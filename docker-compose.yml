version: '3.8'

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  minio_data:
  clamav_data:

services:
  api:
    build: 
      context: .
      dockerfile: api/Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - .env.production
    environment:
      REDIS_URL: redis://redis:6379/0
      QDRANT_URL: http://qdrant:6333
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/postgres
      OTEL_EXPORTER_OTLP_ENDPOINT: http://jaeger:4318/v1/traces
      ENABLE_INAPP_RATE_LIMIT: "false"
    volumes:
      - ./policies:/policies
    depends_on:
      - redis
      - qdrant
      - postgres
  kong:
    image: kong:3.7
    ports:
      - "8001:8001"
      - "8080:8000"
    volumes:
      - ./infra/kong/kong.yaml:/usr/local/kong/declarative/kong.yml
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    command: [
      "redis-server",
      "--appendonly", "yes",
      "--maxmemory", "256mb",
      "--maxmemory-policy", "allkeys-lru",
      "--requirepass", "${REDIS_PASSWORD:-}",
      "--tcp-keepalive", "60",
      "--timeout", "300"
    ]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
  qdrant:
    image: qdrant/qdrant:v1.11.0
    ports:
      - "6334:6333"
    environment:
      QDRANT__SERVICE__API_KEY: ${QDRANT_API_KEY:-}
      QDRANT__LOG_LEVEL: INFO
    volumes:
      - qdrant_data:/qdrant/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  clamav:
    image: mkodockx/docker-clamav:alpine
    ports:
      - "3310:3310"
    environment:
      CLAMD_SETTINGS: "MaxFileSize 100M;StreamMaxLength 100M;MaxThreads 4;MaxDirectoryRecursion 20"
    volumes:
      - clamav_data:/var/lib/clamav
    healthcheck:
      test: ["CMD", "/usr/bin/clamdscan", "--version"]
      interval: 60s
      timeout: 30s
      retries: 3
    restart: unless-stopped
  postgres:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/migrations:/docker-entrypoint-initdb.d
    command: [
      "postgres",
      "-c", "log_statement=all",
      "-c", "log_duration=on",
      "-c", "log_connections=on",
      "-c", "log_disconnections=on",
      "-c", "shared_preload_libraries=pg_stat_statements",
      "-c", "max_connections=200",
      "-c", "shared_buffers=256MB",
      "-c", "effective_cache_size=1GB",
      "-c", "maintenance_work_mem=64MB",
      "-c", "checkpoint_completion_target=0.9",
      "-c", "wal_buffers=16MB",
      "-c", "default_statistics_target=100"
    ]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
  langfuse:
    image: ghcr.io/langfuse/langfuse:latest
    ports:
      - "3001:3000"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-postgres}
      NEXTAUTH_URL: http://localhost:3001
      NEXTAUTH_SECRET: ${LANGFUSE_SECRET:-changeme}
      SALT: ${LANGFUSE_SALT:-changeme}
    depends_on:
      postgres:
        condition: service_healthy
  minio:
    image: quay.io/minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MINIO_SERVER_URL: http://minio:9000
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
  jaeger:
    image: jaegertracing/all-in-one:1.59
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686" # UI
      - "4318:4318"   # OTLP HTTP
