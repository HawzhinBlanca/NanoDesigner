name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install Poetry
        run: pipx install poetry
      - name: Install deps
        run: cd api && poetry install --with dev
      - name: Lint (ruff)
        run: cd api && poetry run ruff check .
      - name: Typecheck (mypy)
        run: cd api && poetry run mypy app
      - name: Tests (pytest)
        run: cd api && poetry run pytest

  frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      - name: Install deps
        run: pnpm install --frozen-lockfile
      - name: Lint
        run: pnpm -C apps/web lint
      - name: Typecheck
        run: pnpm -C apps/web typecheck
      - name: Unit tests
        run: pnpm -C apps/web test -- --coverage

  kong-e2e:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports: ["6379:6379"]
      qdrant:
        image: qdrant/qdrant:v1.11.0
        ports: ["6333:6333"]
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
        ports: ["5432:5432"]
      kong:
        image: kong:3.7
        ports: ["8001:8001", "8080:8000"]
        options: >-
          --health-cmd "kong health" --health-interval 10s --health-timeout 5s --health-retries 5
        volumes:
          - ${{ github.workspace }}/infra/kong/kong.yaml:/usr/local/kong/declarative/kong.yml
        env:
          KONG_DATABASE: off
          KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
          KONG_PROXY_ACCESS_LOG: /dev/stdout
          KONG_ADMIN_ACCESS_LOG: /dev/stdout
          KONG_PROXY_ERROR_LOG: /dev/stderr
          KONG_ADMIN_ERROR_LOG: /dev/stderr
          JWT_ISSUER: ${{ secrets.JWT_ISSUER }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install Poetry
        run: pipx install poetry
      - name: Install API deps
        run: cd api && poetry install --with dev
      - name: Run API
        run: cd api && poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000 &
      - name: Wait for API
        run: until curl -sSf http://localhost:8000/healthz >/dev/null; do sleep 2; done
      - name: E2E via Kong
        env:
          API_BASE_URL: http://localhost:8080
          ENVIRONMENT: test
          CI: true
          TEST_JWT_SECRET: insecure-test-only-ci
        run: python tests/e2e/api_smoke_test.py | cat
      - name: Playwright auth tests via Kong
        env:
          API_BASE_URL: http://localhost:8080
        run: |
          pnpm install --ignore-scripts
          pnpm e2e:playwright | cat
      - name: Install k6
        run: |
          curl -sSL https://github.com/grafana/k6/releases/download/v0.50.0/k6-v0.50.0-linux-amd64.deb -o k6.deb
          sudo dpkg -i k6.deb
      - name: k6 API p95 check (health/metrics)
        env:
          BASE_URL: http://localhost:8080
        run: |
          cat > quick.js <<'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          export const options = { vus: 5, duration: '60s', thresholds: { http_req_duration: ['p(95)<600'] } };
          const BASE = __ENV.BASE_URL;
          export default function () {
            let r1 = http.get(`${BASE}/healthz`);
            check(r1, { 'health 200': (r) => r.status === 200 });
            let r2 = http.get(`${BASE}/metrics/json`);
            check(r2, { 'metrics 200': (r) => r.status === 200 });
            sleep(0.2);
          }
          EOF
          k6 run quick.js

  load-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install k6
        run: |
          curl -sSL https://github.com/grafana/k6/releases/download/v0.50.0/k6-v0.50.0-linux-amd64.deb -o k6.deb
          sudo dpkg -i k6.deb
      - name: Run quick k6 smoke (non-gating for render)
        env:
          BASE_URL: http://localhost:8000
        run: |
          echo "Skipping full render load in CI; provide BASE_URL to staging to run."; exit 0

  semgrep:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Semgrep Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/ci

  trufflehog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: TruffleHog Secrets Scan
        run: |
          curl -sSL https://github.com/trufflesecurity/trufflehog/releases/download/v3.77.0/trufflehog_3.77.0_linux_amd64.tar.gz | tar -xz
          ./trufflehog filesystem . || true

  sonarcloud:
    runs-on: ubuntu-latest
    if: github.secrets.SONAR_TOKEN != ''
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install Poetry
        run: pipx install poetry
      - name: Install deps
        run: cd api && poetry install --with dev
      - name: Tests with coverage XML
        run: cd api && poetry run pytest
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: .

  # Removed duplicate workflow block

