name: Production Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.12'

jobs:
  # Quality gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies (frontend/backend)
        run: |
          pnpm install --frozen-lockfile
          pipx install poetry
          cd api && poetry install --with dev
      
      - name: Run linting
        run: |
          pnpm -C apps/web lint
          cd api && poetry run ruff check .
      
      - name: Run type checking
        run: |
          pnpm -C apps/web typecheck
          cd api && poetry run mypy app
      
      - name: Run tests
        run: |
          pnpm -C apps/web test -- --coverage
          cd api && poetry run pytest --cov=app --cov-report=xml
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info,./api/coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Security scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run Snyk Security
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Build and push Docker images
  build:
    name: Build Docker Images
    needs: [quality-gates, security]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [web, api]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/${{ matrix.service }}.Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/nanodesigner-${{ matrix.service }}:latest
            ${{ secrets.DOCKER_USERNAME }}/nanodesigner-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.nanodesigner.app
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Kubernetes (Staging)
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # Update image tags
          kubectl set image deployment/web web=${{ secrets.DOCKER_USERNAME }}/nanodesigner-web:${{ github.sha }} -n staging
          kubectl set image deployment/api api=${{ secrets.DOCKER_USERNAME }}/nanodesigner-api:${{ github.sha }} -n staging
          kubectl set image deployment/worker worker=${{ secrets.DOCKER_USERNAME }}/nanodesigner-worker:${{ github.sha }} -n staging
          
          # Wait for rollout
          kubectl rollout status deployment/web -n staging
          kubectl rollout status deployment/api -n staging
          kubectl rollout status deployment/worker -n staging
      
      - name: Run smoke tests
        run: |
          npm run test:e2e:staging
      
      - name: Performance testing
        run: |
          npm run test:performance:staging

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://nanodesigner.app
    steps:
      - uses: actions/checkout@v4
      
      - name: Create deployment
        uses: chrnorm/deployment-action@v2
        id: deployment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: production
          ref: ${{ github.sha }}
      
      - name: Blue-Green Deployment
        run: |
          echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # Deploy to green environment
          kubectl set image deployment/web-green web=${{ secrets.DOCKER_USERNAME }}/nanodesigner-web:${{ github.sha }} -n production
          kubectl set image deployment/api-green api=${{ secrets.DOCKER_USERNAME }}/nanodesigner-api:${{ github.sha }} -n production
          kubectl set image deployment/worker-green worker=${{ secrets.DOCKER_USERNAME }}/nanodesigner-worker:${{ github.sha }} -n production
          
          # Wait for green deployment
          kubectl rollout status deployment/web-green -n production
          kubectl rollout status deployment/api-green -n production
          kubectl rollout status deployment/worker-green -n production
          
          # Run health checks
          ./scripts/health-check.sh green
          
          # Switch traffic to green
          kubectl patch service web -n production -p '{"spec":{"selector":{"version":"green"}}}'
          kubectl patch service api -n production -p '{"spec":{"selector":{"version":"green"}}}'
          
          # Wait and verify
          sleep 30
          ./scripts/verify-deployment.sh
          
          # Update blue environment for next deployment
          kubectl set image deployment/web-blue web=${{ secrets.DOCKER_USERNAME }}/nanodesigner-web:${{ github.sha }} -n production
          kubectl set image deployment/api-blue api=${{ secrets.DOCKER_USERNAME }}/nanodesigner-api:${{ github.sha }} -n production
          kubectl set image deployment/worker-blue worker=${{ secrets.DOCKER_USERNAME }}/nanodesigner-worker:${{ github.sha }} -n production
      
      - name: Update deployment status
        if: always()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          state: ${{ job.status }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
      
      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment to production ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Post-deployment verification
  verify:
    name: Post-Deployment Verification
    needs: deploy-production
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run E2E tests
        run: |
          npm run test:e2e:production
      
      - name: Run synthetic monitoring
        run: |
          npm run test:synthetic
      
      - name: Check metrics
        run: |
          ./scripts/check-metrics.sh
      
      - name: Rollback if needed
        if: failure()
        run: |
          echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # Switch back to blue
          kubectl patch service web -n production -p '{"spec":{"selector":{"version":"blue"}}}'
          kubectl patch service api -n production -p '{"spec":{"selector":{"version":"blue"}}}'
          
          # Notify rollback
          curl -X POST ${{ secrets.SLACK_WEBHOOK }} \
            -H 'Content-Type: application/json' \
            -d '{"text":"⚠️ Production deployment rolled back due to verification failure"}'